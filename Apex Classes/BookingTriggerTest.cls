@isTest
private class BookingTriggerTest {

    @isTest
    static void testTriggerCreatesPaymentAndGuestsWithUpdatedFields() {

        // 1. Create a sample Customer_Info__c record (required for Booking)
        Customer_Info__c customer = new Customer_Info__c(
            Name = 'Andreas Luy',
            Email__c = 'luy.andreas@student.auf.edu.ph',
            Phone__c = '1234567890',
            Date_Of_Birth__c = Date.newInstance(2004, 7, 27),
            Country__c = 'Philippines'
        );
        insert customer;

        // 2. Create a sample TravelPackage__c record (linked to Booking)
        TravelPackage__c packageRec = new TravelPackage__c(
            Name = 'Taste the great sisig of Angeles',
            Country__c = 'Philippines',
            Price_Per_Person__c = 2000,
            Duration_in_Days__c = 3,
            Places_Covered__c = 'Angeles City'
        );
        insert packageRec;

        // 3. Create a Booking__c record 
        //    - This will fire the trigger when inserted
        Booking__c booking = new Booking__c(
            Number_of_Travelers__c = 3,
            Booking_Status__c = 'Pending',
            Travelling_Start_Date__c = Date.today().addDays(10),
            Travel_Package__c = packageRec.Id,        
            Membership_Chosen__c = 'Gold',           
            Preferred_Accommodation__c = 'Guest House',
            Customer__c = customer.Id,
            Customer_Email__c = 'luy.andreas@student.auf.edu.ph',
            Booking_Date__c = Date.newInstance(2025, 7, 7)
        );

        // 4. Run the trigger logic inside a test context
        Test.startTest();
        insert booking; // Trigger fires here -> should create Payment + Guests
        Test.stopTest();

        // 5. Validate Booking_Payment__c was created with correct default values
        List<Booking_Payment__c> payments = [
            SELECT Id, Booking__c, Payment_Status__c 
            FROM Booking_Payment__c 
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(1, payments.size(), 'One payment record should be created.');
        System.assertEquals('Pending', payments[0].Payment_Status__c, 'Default Payment Status should be Pending.');

        // 6. Validate BookingGuest__c records were created (based on traveler count)
        List<BookingGuest__c> guests = [
            SELECT Id, Booking__c, Name 
            FROM BookingGuest__c 
            WHERE Booking__c = :booking.Id
        ];
        System.assertEquals(3, guests.size(), 'Three BookingGuest records should be created.');
        System.assertEquals('Guest 1', guests[0].Name, 'Guest naming should follow convention.');
    }
}